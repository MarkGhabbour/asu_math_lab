#include <iostream>
#include <string>
#include <vector>
using namespace std;

////////////////////CVariables class///////////////
class CVariables
{
public:
	string name;
	double value;
};

//////////////CMatrix class/////////////////////
class CMatrix
{
	double **pp_rows;
	int nrows,ncols;
	string name;
public:
	  CMatrix(int r,int c,int mode=1,string name="ans")  //1:zeros  2:ones  3:rand  4:eye
    {
        this->nrows=r;
        this->ncols=c;
		this->name=name;
        pp_rows=new double*[r];
        for(int i=0;i<r;i++)
        {
            pp_rows[i]=new double[c];
			for(int j=0;j<c;j++)
			{
				if(mode==1) pp_rows[i][j]=0;
				else if(mode==2) pp_rows[i][j]=1;
				else if(mode==3) pp_rows[i][j]=rand();
				else if(mode==4) pp_rows[i][j]=((i==j)?1:0);
			}
		}
	  }

	  CMatrix(string h,string name="ans")
	  {
		  this->name=name;
		  cout<<"name: "<<name<<endl;
		  int r=1,c=1,enough_cols=0;
		  for(int i=0;i<h.length();i++)
		  {
			  if((h[i]==' ' || h[i]==',')&& !enough_cols) c++;
			  else if(h[i]==';' || h[i]==13)    //13:the ascii code of enter key
			  {
				  r++;
				  enough_cols=1;
			  }
		  }
		  int mode=1;
		  if(name[1]=='#') mode=2;
		  *this=CMatrix(r,c,mode,name);
		  r=0;c=0;
		  string el="";
		  for(int i=0;i<=h.length();i++)
		  {
			  if((h[i]==' ')||(h[i]==',') ||((i==h.length())) ){pp_rows[r][c]=atof(el.c_str()); c++; el="";}
			  else if((h[i]==';')||(h[i]==13)) {pp_rows[r][c]=atof(el.c_str()); c=0; r++; el="";}
			  else el+=h[i];
		  }
	  }

	  void print_mat()
	  {
		  for(int i=0;i<nrows;i++)
		  {
			  for(int j=0;j<ncols;j++)
			  {
				  cout<<"		"<<pp_rows[i][j];
			  }
			  cout<<endl;
		  }
	  }

	  friend string create_mat(string h,int mode=1);
	  friend string concat(CMatrix A,CMatrix B);
};

string concat(CMatrix A,CMatrix B)
{
	string ret="";
	for(int i=0;i<A.nrows;i++)
	{
		for(int j=0;j<(A.ncols+B.ncols);j++)
		{
			if(j<A.ncols) ret+=to_string(A.pp_rows[i][j]);
			else ret+=to_string(B.pp_rows[i][j-A.ncols]);

			if(j!=(A.ncols+B.ncols-1)) ret+=" ";
		}
		if(i!=(A.nrows-1)) ret+=";";
	}
	cout<<ret<<endl;
	return ret;
}

vector <CVariables> vars;
vector <CMatrix> mats;

string create_mat(string h,int mode)
{
	static int temp_counter=0;
    //searching for CVariables
    //only in the first time
    if(mode==1)
    {
        for(int i=0;i<vars.size();i++)
        {
            int pos=h.find(vars[i].name);
            if(pos != -1)
                {h.replace(pos,vars[i].name.length(),to_string(vars[i].value)); i--;} //if it's repeated so find it again
            }
    }
    //searching for [ ]
  /*  while(h.find("[")!=-1)
    {
        int open_braket_pos=h.find("[");
        int closed_braket_pos=h.find("]");
        string mat_name=create_mat(h.substr(open_braket_pos+1,closed_braket_pos-open_braket_pos-1),2);
        h.replace(open_braket_pos,closed_braket_pos-open_braket_pos,mat_name);
        }*/
	int brakets=0,flag=0,open_braket_pos,closed_braket_pos,smallest_closed=0,first_open=0,first_open_pos;
	for(int i=0;i<=h.length();i++)
	{
		if(h[i]=='[') {brakets++; flag=1; open_braket_pos=i;if(first_open==0){first_open=1;first_open_pos=i;}}
		else if(h[i]==']') {brakets--; if(smallest_closed==0){closed_braket_pos=i;smallest_closed=1;brakets=0;}}

		if(flag==1 && brakets==0)
		{
			string mat_name=create_mat(h.substr(open_braket_pos+1,closed_braket_pos-open_braket_pos-1),2);
			h.replace(open_braket_pos,closed_braket_pos-open_braket_pos+1,mat_name);
		//	i=open_braket_pos+1;
			i=first_open_pos-1;
			smallest_closed=0;
			first_open=0;
			flag=0;
		}
	}
   
    //here no [ ] exists only elements or matrices
    //searching for matrices
	for(int i=0;i<mats.size();i++)
	{
		int pos=h.find(mats[i].name);
		if(pos!=-1)
		{
			if( (pos==0 ||h[pos-1]==';' ) && (pos==h.length()-mats[i].name.length() ||h[pos+mats[i].name.length()]==';') )
			{
				h.replace(pos,mats[i].name.length(),concat(mats[i],CMatrix(0,0)));   //edit
			}
			else if((pos==0 ||h[pos-1]==';') && (h[pos+mats[i].name.length()]==' '||h[pos+mats[i].name.length()]==','))
			{
				int second_mat_pos=h.find_first_of(" ;",pos+mats[i].name.length()+1);
				string second_mat=h.substr(pos+mats[i].name.length()+1,second_mat_pos-pos-mats[i].name.length()-1);
				for(int j=0;j<mats.size();j++)
				{
					if(second_mat==mats[j].name)
					{
						h.replace(pos,mats[i].name.length()+mats[j].name.length()+1,concat(mats[i],mats[j]));
						i--;
						break;
					}
				}
			}
		}
	}
    


	if(mode==2)
	{
		mats.push_back(CMatrix(h,"#"+to_string(temp_counter++)));
		return mats[mats.size()-1].name;
	}
	else return h;

}


int main()
{
	CVariables A,B;
  A.name="A"; A.value=1.234;
  B.name="B"; B.value=-22.2;
  vars.push_back(A);
  vars.push_back(B);

  CMatrix C("1 3 4;4 -2 3;3 2 2.28","C");
  mats.push_back(C);
  C.print_mat();
  CMatrix D(concat(CMatrix("2 3 4;4 3 2"),CMatrix("3 2 2;3 4 5")));
  D.print_mat();
  CMatrix(create_mat("3 A -1;C",1),"X").print_mat();
  mats.push_back(CMatrix(create_mat("3 A -1;C",1),"X"));
  CMatrix(create_mat("X [2;4;B;5]",1),"Z").print_mat();

  CMatrix R(create_mat("1.2 2.3 A;[1.3 2.4;4.6 1.3],[3.2;7.8]",1),"R");
  R.print_mat();
  CMatrix(create_mat("[C [1;-2;5]];A 3 2 B",1),"N").print_mat();
	return 0;
}